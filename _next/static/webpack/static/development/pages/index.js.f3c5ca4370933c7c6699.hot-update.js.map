{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.f3c5ca4370933c7c6699.hot-update.js","sources":["webpack:///./pages/index.js","webpack:///./services/calculatorService.js"],"sourcesContent":["import React from 'react';\nimport Head from 'next/head';\n\nimport data from '../data';\n\nimport calculatorService from '../services/calculatorService';\n\nconst Home = () => (\n  <div>\n    <Head>\n      <title>Shares Saver Calculator</title>\n      <link rel=\"icon\" href=\"/favicon.ico\" />\n    </Head>\n\n    <div className=\"hero\">\n      <h1 className=\"title\">Shares Saver Calculator</h1>\n      <p className=\"description\">\n        Choose a saver plan and enter your monthly saving contribution.\n      </p>\n      <p>\n        {data.asx.name}\n      </p>\n      <button onClick={() => calculatorService.calculate(data.asx, 100)}>\n        Calculate\n      </button>\n    </div>\n\n    <style jsx>{`\n      .hero {\n        width: 100%;\n        color: #333;\n      }\n      .title {\n        margin: 0;\n        width: 100%;\n        padding-top: 80px;\n        line-height: 1.15;\n        font-size: 48px;\n      }\n      .title,\n      .description {\n        text-align: center;\n      }\n      .row {\n        max-width: 880px;\n        margin: 80px auto 40px;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n      }\n      .card {\n        padding: 18px 18px 24px;\n        width: 220px;\n        text-align: left;\n        text-decoration: none;\n        color: #434343;\n        border: 1px solid #9b9b9b;\n      }\n      .card:hover {\n        border-color: #067df7;\n      }\n      .card h3 {\n        margin: 0;\n        color: #067df7;\n        font-size: 18px;\n      }\n      .card p {\n        margin: 0;\n        padding: 12px 0 0;\n        font-size: 13px;\n        color: #333;\n      }\n    `}</style>\n  </div>\n);\n\nexport default Home;\n","const getDividend = (dividends, date) =>\n  dividends && dividends.find(div => div[0] === date);\n\nconst calculate = (fund, monthlyContribution) => {\n  const { prices, dividends, entryFee, totalExpenseRatio } = fund;\n  const monthlyDeposit = monthlyContribution * ((100 - entryFee) / 100);\n  let totalDeposited = 0;\n  let totalShares = 0;\n\n  prices.forEach(price => {\n    const date = new Date(price[0]);\n    const amount = price[1];\n    const sharesToBuy = monthlyDeposit / amount;\n  \n    totalDeposited += monthlyDeposit;\n    totalShares += sharesToBuy;\n  \n    const dividend = getDividend(dividends, price[0]);\n  \n    if (dividend) {\n      const dividendAmount = dividend[1] * totalShares;\n      const dividendShares = dividendAmount / amount;\n      totalShares += dividendShares;\n      console.log(`Added ${dividendShares} dividend shares (${dividendShares * amount} euros)`);\n    }\n  \n    if (date.getDate() === 1) {\n      console.log(\n        `${date.toISOString()} -> ${sharesToBuy} -> ${totalShares} -> ${totalDeposited} -> ${totalShares * amount} -> ${(totalShares * amount) / totalDeposited * 100}`\n      );\n    }\n  \n    if (date.getMonth() === 0) {\n      console.log(`Management fee paid ${totalShares * (totalExpenseRatio / 100)} shares`);\n      totalShares *= ((100 - totalExpenseRatio) / 100);\n    }\n  });\n}\n\nexport default calculate;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AADA;AACA;AAoEA;;;;;;;;;;;;AC5EA;AAAA;AAAA;AACA;AAAA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}